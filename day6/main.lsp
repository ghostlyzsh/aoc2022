(defun find_duplicate(str)
  (setq letterMap (make-hash-table))
  (dolist (element (coerce str 'list))
    (setf (gethash element letterMap) 0)
  )
  (dolist (element (coerce str 'list))
    (incf (gethash element letterMap))
  )
  (loop for element being the hash-keys of letterMap do
    (when (> (gethash element letterMap) 1)
      (return t)
    )
  )
)
(defun slice (list start end)
  (cond ((null list) nil)
        ((<= start 1) (cons (car list) (slice (cdr list) (- start 1) (- end 1))))
        (t (slice (cdr list) (- start 1) (+ end 1)))))

(defun main()
    (setq lines '())
    (let ((in (open "input.txt" :if-does-not-exist nil)))
        (when in
            (loop for line = (read-line in nil)

            while line do (setq lines (push line lines)))
            (close in)
        )
    )

    (setq uniqueChars 14)
    (dolist (line lines)
      (setq i 0)
      (setq chars (subseq line 0 uniqueChars))
      (block name
        (loop while (find_duplicate chars) do
          (print chars)
          (print (find_duplicate chars))
          (setq chars (subseq line i (+ i uniqueChars)))
          (incf i)
        )
      )
      (print (+ i (- uniqueChars 1)))
    )
)
(main)
